#!/usr/bin/env python3# =============================================================================# Author:  Chenghua Shao# Date:    2022-08-01# Updates:# ============================================================================="""check Cif format and essential content but not dictionary compliance"""# from extract.pdbx_v2.PdbxReader import PdbxReaderfrom mmcif.io.IoAdapterCore import IoAdapterCoreimport logginglogger_name = '.'.join(["PDB_EX", __name__])logger = logging.getLogger(logger_name)class Check():    """ Class to check cif format    """    def __init__(self, filepath):        """        Attempt to read cif file        Parameters        ----------        filepath : TYPE            DESCRIPTION.        Returns        -------        None.        """        self.ll_block_cat = []  # list of list, each component is a list of cats in block        self.l_dc = []  # list of data containers        if not self.checkHeader(filepath):            logger.error("Input cif file % has wrong format, no proper header" % filepath)        io = IoAdapterCore()        try:            self.l_dc = io.readFile(filepath)            logger.info("Parse cif file %s OK" % filepath)            for dc in self.l_dc:                self.ll_block_cat.append(dc.getObjNameList())        except Exception as e:            logger.info("Parse cif file %s failed" % filepath)            logger.exception(e)    def checkHeader(self, filepath):        """        Check cif header for "data_"        Parameters        ----------        file : TYPE            DESCRIPTION.        Returns        -------        bool            DESCRIPTION.        """        with open(filepath) as file:            for line in file:                if line.strip():                    if line.strip()[0] != "#":                        if line.strip()[:5] == "data_":                            file.seek(0, 0)                            return True                        else:                            return False        return False    def checkFormat(self):        """        Check whether the file is proper cif format        Returns        -------        bool            True if in cif format.        """        if self.ll_block_cat:            return True        else:            return False    def getNumBlocks(self):        """        Return the number of data blocks        Returns        -------        Integer            number of data blocks.        """        return len(self.ll_block_cat)    def checkMandatoryCat(self):        """        Check the presence of essential categories        Returns        -------        bool            True if all essential categories are present        """        # l_mandatory_cat = ["atom_site","cell","symmetry"]        l_mandatory_cat = ["atom_site"]        if self.ll_block_cat:            for cat in l_mandatory_cat:                if cat not in self.ll_block_cat[0]:                    logger.debug("%s category not in cif file checked" % cat)                    return False            return True        else:            return Falsedef main():    filepath = "/Users/chenghua/Projects/pdb-extract-prod-py/tests/test_data/CIF4test/maxit_out.cif"    checker = Check(filepath)    print(checker.ll_block_cat)    print(checker.checkHeader(filepath))    print(checker.checkFormat())    print(checker.checkMandatoryCat())if __name__ == "__main__":    main()